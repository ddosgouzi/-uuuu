<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>李成洁 iloveu - 爱的告白</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Microsoft YaHei', sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            overflow: hidden;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }
        
        canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }
        
        .container {
            position: relative;
            z-index: 2;
            text-align: center;
            max-width: 800px;
            padding: 40px;
        }
        
        .message {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5);
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            animation: float 6s ease-in-out infinite;
        }
        
        h1 {
            font-size: 4rem;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #ff6b6b, #ffa8a8, #ffd8d8);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: 0 0 20px rgba(255, 107, 107, 0.5);
            letter-spacing: 3px;
        }
        
        .subtitle {
            font-size: 1.8rem;
            margin-top: 20px;
            color: #ffd8d8;
            opacity: 0.9;
        }
        
        .heart-container {
            position: relative;
            width: 300px;
            height: 300px;
            margin: 0 auto 30px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .heart {
            position: absolute;
            width: 120px;
            height: 120px;
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            transform: rotate(45deg);
            animation: heartbeat 1.5s ease-in-out infinite both;
            box-shadow: 0 0 50px #ff6b6b;
            cursor: pointer;
        }
        
        .heart:before,
        .heart:after {
            content: '';
            position: absolute;
            width: 120px;
            height: 120px;
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            border-radius: 50%;
        }
        
        .heart:before {
            top: -60px;
            left: 0;
        }
        
        .heart:after {
            top: 0;
            left: -60px;
        }
        
        .interactive-btn {
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            border: none;
            padding: 15px 40px;
            border-radius: 50px;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 20px rgba(255, 107, 107, 0.4);
            margin-top: 20px;
        }
        
        .interactive-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 25px rgba(255, 107, 107, 0.6);
        }
        
        .footer {
            margin-top: 30px;
            font-size: 1rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
            100% { transform: translateY(0px); }
        }
        
        @keyframes heartbeat {
            0% { transform: rotate(45deg) scale(1); }
            5% { transform: rotate(45deg) scale(1.1); }
            10% { transform: rotate(45deg) scale(1); }
            15% { transform: rotate(45deg) scale(1.2); }
            50% { transform: rotate(45deg) scale(1); }
            100% { transform: rotate(45deg) scale(1); }
        }
        
        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .subtitle {
                font-size: 1.3rem;
            }
            
            .heart-container {
                width: 200px;
                height: 200px;
            }
            
            .heart {
                width: 80px;
                height: 80px;
            }
            
            .heart:before,
            .heart:after {
                width: 80px;
                height: 80px;
            }
            
            .heart:before {
                top: -40px;
            }
            
            .heart:after {
                left: -40px;
            }
        }
    </style>
</head>
<body>
    <canvas id="particleCanvas"></canvas>
    
    <div class="container">
        <div class="message">
            <h1>李成洁 iloveu</h1>
            <p class="subtitle">你是我生命中最美的相遇</p>
            
            <div class="heart-container">
                <div class="heart" id="interactiveHeart"></div>
            </div>
            
            <button class="interactive-btn" id="loveBtn">点击发送爱心</button>
        </div>
        
        <div class="footer">
            <p>永远爱你的 ❤️</p>
        </div>
    </div>

    <script>
        // 粒子背景
        const canvas = document.getElementById('particleCanvas');
        const ctx = canvas.getContext('2d');
        
        // 设置canvas尺寸
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        
        // 粒子类
        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.size = Math.random() * 3 + 1;
                this.speedX = Math.random() * 2 - 1;
                this.speedY = Math.random() * 2 - 1;
                this.color = `rgba(255, ${Math.floor(Math.random() * 150 + 100)}, ${Math.floor(Math.random() * 150 + 100)}, ${Math.random() * 0.5 + 0.2})`;
            }
            
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                
                // 边界检查
                if (this.x > canvas.width || this.x < 0) this.speedX = -this.speedX;
                if (this.y > canvas.height || this.y < 0) this.speedY = -this.speedY;
            }
            
            draw() {
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        
        // 创建粒子数组
        const particles = [];
        const particleCount = 150;
        
        for (let i = 0; i < particleCount; i++) {
            particles.push(new Particle());
        }
        
        // 动画循环
        function animateParticles() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // 更新并绘制所有粒子
            particles.forEach(particle => {
                particle.update();
                particle.draw();
            });
            
            // 绘制粒子间的连线
            drawConnections();
            
            requestAnimationFrame(animateParticles);
        }
        
        // 绘制粒子间的连线
        function drawConnections() {
            const maxDistance = 100;
            
            for (let i = 0; i < particles.length; i++) {
                for (let j = i + 1; j < particles.length; j++) {
                    const dx = particles[i].x - particles[j].x;
                    const dy = particles[i].y - particles[j].y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    if (distance < maxDistance) {
                        const opacity = 1 - (distance / maxDistance);
                        ctx.strokeStyle = `rgba(255, 255, 255, ${opacity * 0.2})`;
                        ctx.lineWidth = 1;
                        ctx.beginPath();
                        ctx.moveTo(particles[i].x, particles[i].y);
                        ctx.lineTo(particles[j].x, particles[j].y);
                        ctx.stroke();
                    }
                }
            }
        }
        
        animateParticles();
        
        // 交互式爱心效果
        const interactiveHeart = document.getElementById('interactiveHeart');
        const loveBtn = document.getElementById('loveBtn');
        
        interactiveHeart.addEventListener('click', createHearts);
        loveBtn.addEventListener('click', createHearts);
        
        function createHearts() {
            // 创建多个小爱心
            for (let i = 0; i < 15; i++) {
                setTimeout(() => {
                    createFloatingHeart();
                }, i * 100);
            }
        }
        
        function createFloatingHeart() {
            const heart = document.createElement('div');
            heart.classList.add('heart');
            heart.style.width = '30px';
            heart.style.height = '30px';
            heart.style.position = 'fixed';
            heart.style.top = '50%';
            heart.style.left = '50%';
            heart.style.zIndex = '3';
            heart.style.animation = 'none';
            
            document.body.appendChild(heart);
            
            // 随机方向
            const angle = Math.random() * Math.PI * 2;
            const distance = 200 + Math.random() * 100;
            const targetX = Math.cos(angle) * distance + window.innerWidth / 2;
            const targetY = Math.sin(angle) * distance + window.innerHeight / 2;
            
            // 动画
            const animation = heart.animate([
                { 
                    transform: 'rotate(45deg) scale(1)',
                    opacity: 1,
                    left: '50%',
                    top: '50%'
                },
                { 
                    transform: `rotate(45deg) scale(0.5)`,
                    opacity: 0,
                    left: `${targetX}px`,
                    top: `${targetY}px`
                }
            ], {
                duration: 1500,
                easing: 'ease-out',
                fill: 'forwards'
            });
            
            animation.onfinish = () => {
                heart.remove();
            };
        }
        
        // 鼠标移动粒子互动
        let mouseX = 0;
        let mouseY = 0;
        
        document.addEventListener('mousemove', (e) => {
            mouseX = e.clientX;
            mouseY = e.clientY;
            
            // 粒子对鼠标的响应
            particles.forEach(particle => {
                const dx = particle.x - mouseX;
                const dy = particle.y - mouseY;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance < 100) {
                    particle.speedX += dx / distance * 0.1;
                    particle.speedY += dy / distance * 0.1;
                }
            });
        });
    </script>
</body>
</html>
